#!/bin/bash

# aivllm - 커맨드라인에서 mai-vllm-serving과 대화하는 스크립트
# 사용법: ./aivllm
#   실행 후 프롬프트에 질문을 입력하세요
#   종료하려면 .exit 또는 .bye를 입력하세요

# 설정 변수
SERVER_URL="http://localhost:8020/generate"
MAX_TOKENS=1024
TEMPERATURE=0.7
TOP_P=0.9
TOP_K=40
FREQUENCY_PENALTY=0.2
PRESENCE_PENALTY=0.2
REPETITION_PENALTY=1.2

# 반복 감지 설정
REPEAT_THRESHOLD=3

# 터미널 색상 설정
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# 배너 표시
echo -e "${BLUE}=====================================================${NC}"
echo -e "${BLUE}  aivllm - mai-vllm-serving 커맨드라인 인터페이스   ${NC}"
echo -e "${BLUE}=====================================================${NC}"
echo -e "${YELLOW}질문을 입력하세요. 종료하려면 .exit 또는 .bye를 입력하세요.${NC}"
echo -e "${BLUE}=====================================================${NC}"

# 한글 디코딩 및 반복 감지를 위한 함수
function process_sse() {
    local line
    local last_outputs=()
    local repeat_count=0
    
    while read -r line; do
        # "data: " 접두사 제거
        if [[ "$line" == data:* ]]; then
            line=${line#data: }
            
            # [DONE] 메시지 처리
            if [ "$line" == "[DONE]" ]; then
                break
            fi
            
            # JSON 파싱 (new_text 필드 추출)
            if command -v jq &> /dev/null; then
                # jq를 사용하여 파싱
                new_text=$(echo "$line" | jq -r '.new_text // empty')
                if [ -n "$new_text" ]; then
                    # 반복 감지 로직
                    # 마지막 3개 출력을 저장
                    last_outputs+=("$new_text")
                    if [ ${#last_outputs[@]} -gt 3 ]; then
                        # 가장 오래된 항목 제거
                        last_outputs=("${last_outputs[@]:1}")
                    fi
                    
                    # 반복 패턴 검사
                    if [ ${#last_outputs[@]} -eq 3 ]; then
                        if [ "${last_outputs[0]}" == "${last_outputs[1]}" ] && [ "${last_outputs[1]}" == "${last_outputs[2]}" ]; then
                            repeat_count=$((repeat_count + 1))
                            if [ $repeat_count -ge $REPEAT_THRESHOLD ]; then
                                echo -e "\n${RED}[경고] 반복 패턴이 감지되어 생성을 중단합니다.${NC}"
                                return 1
                            fi
                        else
                            repeat_count=0
                        fi
                    fi
                    
                    printf "%s" "$new_text"
                fi
                
                # 오류 확인
                error=$(echo "$line" | jq -r '.error // empty')
                if [ -n "$error" ]; then
                    echo -e "\n${RED}오류: $error${NC}"
                    return 1
                fi
                
                # 응답 완료 확인
                is_finished=$(echo "$line" | jq -r '.finished // false')
                if [ "$is_finished" == "true" ]; then
                    finish_reason=$(echo "$line" | jq -r '.finish_reason // ""')
                    if [ -n "$finish_reason" ] && [ "$finish_reason" != "null" ]; then
                        echo -e "\n${BLUE}[완료 - $finish_reason]${NC}"
                        return 0
                    fi
                fi
            else
                # jq가 없는 경우 간단한 대체 파싱
                new_text=$(echo "$line" | grep -o '"new_text":"[^"]*"' | sed 's/"new_text":"//;s/"$//')
                if [ -n "$new_text" ]; then
                    # Unicode 이스케이프 시퀀스 처리 (간단한 경우만)
                    new_text=$(echo -e "$new_text")
                    printf "%s" "$new_text"
                fi
                
                # jq 없이는 복잡한 반복 감지가 어려움
            fi
        fi
    done
    return 0
}

# 대화 루프
while true; do
    # 사용자 입력 받기
    echo -e "\n${YELLOW}질문: ${NC}" 
    read -r PROMPT
    
    # 종료 명령 확인
    if [[ "$PROMPT" == ".exit" || "$PROMPT" == ".bye" ]]; then
        echo -e "${BLUE}대화를 종료합니다. 안녕히 가세요!${NC}"
        break
    fi
    
    # 특별 명령: 파라미터 조정
    if [[ "$PROMPT" == ".params" ]]; then
        echo -e "${BLUE}현재 파라미터:${NC}"
        echo -e "  Temperature: ${TEMPERATURE}"
        echo -e "  Top-p: ${TOP_P}"
        echo -e "  Top-k: ${TOP_K}"
        echo -e "  Frequency Penalty: ${FREQUENCY_PENALTY}"
        echo -e "  Presence Penalty: ${PRESENCE_PENALTY}"
        echo -e "  Repetition Penalty: ${REPETITION_PENALTY}"
        echo -e "  Max Tokens: ${MAX_TOKENS}"
        
        echo -e "${YELLOW}변경할 파라미터를 입력하세요 (예: temp=0.8 또는 all=default):${NC}"
        read -r PARAM_CMD
        
        if [[ "$PARAM_CMD" == "all=default" ]]; then
            TEMPERATURE=0.7
            TOP_P=0.9
            TOP_K=40
            FREQUENCY_PENALTY=0.2
            PRESENCE_PENALTY=0.2
            REPETITION_PENALTY=1.2
            MAX_TOKENS=1024
            echo -e "${GREEN}모든 파라미터가 기본값으로 재설정되었습니다.${NC}"
        else
            # 개별 파라미터 설정
            IFS=' ' read -ra PARAMS <<< "$PARAM_CMD"
            for PARAM in "${PARAMS[@]}"; do
                KEY=$(echo $PARAM | cut -d= -f1)
                VALUE=$(echo $PARAM | cut -d= -f2)
                
                case "$KEY" in
                    temp|temperature)
                        TEMPERATURE=$VALUE
                        echo -e "${GREEN}Temperature가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    topp|top_p)
                        TOP_P=$VALUE
                        echo -e "${GREEN}Top-p가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    topk|top_k)
                        TOP_K=$VALUE
                        echo -e "${GREEN}Top-k가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    freq|frequency)
                        FREQUENCY_PENALTY=$VALUE
                        echo -e "${GREEN}Frequency Penalty가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    pres|presence)
                        PRESENCE_PENALTY=$VALUE
                        echo -e "${GREEN}Presence Penalty가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    rep|repetition)
                        REPETITION_PENALTY=$VALUE
                        echo -e "${GREEN}Repetition Penalty가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    max|max_tokens)
                        MAX_TOKENS=$VALUE
                        echo -e "${GREEN}Max Tokens가 $VALUE로 설정되었습니다.${NC}"
                        ;;
                    *)
                        echo -e "${RED}알 수 없는 파라미터: $KEY${NC}"
                        ;;
                esac
            done
        fi
        continue
    fi
    
    # 빈 프롬프트 확인
    if [ -z "$PROMPT" ]; then
        echo -e "${YELLOW}질문을 입력해주세요.${NC}"
        continue
    fi
    
    # 응답 시작
    echo -e "${GREEN}응답: ${NC}"
    
    # curl 요청 및 응답 처리
    curl -s -X POST "$SERVER_URL" \
      -H "Content-Type: application/json; charset=utf-8" \
      -H "Accept: application/json; charset=utf-8" \
      -d "{
        \"prompt\": \"$PROMPT\",
        \"max_tokens\": $MAX_TOKENS,
        \"temperature\": $TEMPERATURE,
        \"top_p\": $TOP_P,
        \"top_k\": $TOP_K,
        \"frequency_penalty\": $FREQUENCY_PENALTY,
        \"presence_penalty\": $PRESENCE_PENALTY,
        \"repetition_penalty\": $REPETITION_PENALTY,
        \"stream\": true
      }" \
      --no-buffer | process_sse
      
    # process_sse의 반환 값에 따라 추가 메시지 표시
    SSE_RESULT=$?
    if [ $SSE_RESULT -eq 1 ]; then
        echo -e "\n${YELLOW}응답이 중단되었습니다. 다른 질문을 시도해보세요.${NC}"
    fi
      
    # 구분선 추가
    echo -e "\n${BLUE}----------------------------------------------------${NC}"
done

# 스크립트 종료
exit 0
